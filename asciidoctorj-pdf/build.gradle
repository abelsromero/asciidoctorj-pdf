import org.ysb33r.gradle.jruby.api.base.tasks.JRubyPrepare

ext {
  // path to use for the prepared jruby gems
  preparedGems = new File("${layout.buildDirectory.get()}/preparedGems")
}

dependencies {
  testImplementation ("org.asciidoctor:asciidoctorj:$asciidoctorJVersion") {
    exclude group:'org.jruby'
  }

  testImplementation "org.jruby:jruby-complete:$jrubyVersion"

  runtimeGems("rubygems:asciidoctor-pdf:$asciidoctorPdfGemVersion") {
    // Exclude gems provided by AsciidoctorJ core
    exclude module: 'asciidoctor'
    exclude module: 'thread_safe'
    exclude module: 'prawn'
    exclude module: 'addressable'
    exclude module: 'rexml'
    exclude module: 'public_suffix'
    exclude module: 'ttfunk'
    exclude module: 'concurrent-ruby'
  }
  runtimeGems "rubygems:concurrent-ruby:$concurrentRubyVersion"
  runtimeGems "rubygems:thread_safe:$threadSafeGemVersion"

  runtimeGems "rubygems:prawn:$prawnGemVersion"
  runtimeGems "rubygems:prawn-svg:$prawnSvgGemVersion"
  runtimeGems "rubygems:rghost:$rghostGemVersion"
  runtimeGems "rubygems:addressable:$addressableVersion"
  runtimeGems "rubygems:public_suffix:$public_suffixVersion"
  runtimeGems "rubygems:text-hyphen:$textHyphenVersion"
  runtimeGems "rubygems:ttfunk:$ttfunkGemVersion"
  runtimeGems "rubygems:css_parser:$cssParserGemVersion"

  testImplementation "org.apache.pdfbox:pdfbox:$pdfboxVersion"
}

def gemFiles = fileTree("${project.buildDir}/.gems") {
  include 'specifications/*.gemspec'
  include 'gems/*/lib/**'
  include "gems/*/data/fonts/**"
  include "gems/*/data/themes/**"
  include "gems/asciidoctor-pdf-$asciidoctorPdfGemVersion/data/**"
  // Accommodate Prawn's non-conforming packaging
  include "gems/prawn-*/VERSION"
  include "gems/prawn-*/data/*.txt"
  include "gems/prawn-*/data/encodings/*"
  // Include icon fonts
  include "gems/prawn-icon-*/data/fonts/**"
  // Include required data file from the addressable gem
  include "gems/addressable-*/data/*.data"
}

tasks.named('gemPrepare', JRubyPrepare) {
  gemConfiguration = configurations.runtimeGems
  doLast {
    copy { // bundles the gems inside this artifact
      from gemFiles
      into preparedGems
    }
  }
}

sourceSets {
  main {
    //let's register an output folder on the main SourceSet:
    output.dir(preparedGems, builtBy: 'gemPrepare')
    //it is now a part of the 'main' classpath and will be a part of the jar
  }
}

ext.publicationName = "mavenAsciidoctorJPdf"

apply from: rootProject.file('gradle/publish.gradle')
apply from: rootProject.file('gradle/signing.gradle')
